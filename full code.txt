app.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MY Menu</title>
    <link rel="stylesheet" href="./css/app.css">
  </head>
  <body>
    <div class="app">
      <header class="header">
        <span id="pageTitle">MY Menu</span>
        <button class="help-btn" onclick="showPage('help')">Help</button>
      </header>

      <main class="content">
        <!-- Store Page -->
        <section id="storePage" class="page active">
          <div class="card">
            <div class="payment-count">Today Collection: - 5 Payments</div>
            <div class="total-amount">₹9100</div>
            <div id="todayPayments" class="payment-list"></div>
          </div>
        </section>

        <!-- QR Page -->
        <section id="qrPage" class="page hidden">
          <div class="card qr-container">
            <h3>Store Name</h3>
            <img id="qrCodeImage" src="" alt="QR Code" class="qr-code" />
            <button onclick="downloadQR()" class="download-btn">
              Download QR
            </button>
          </div>
        </section>

        <!-- Account Page -->
        <section id="accountPage" class="page hidden">
          <div class="card store-details">
            <div class="row" onclick="toggleSection('personalDetailsSection')">
              <span>Personal Details</span>
              <button class="edit-btn" onclick="showEditForm('personalDetailsForm')">Edit</button>
            </div>
            <div id="personalDetailsSection" class="details hidden">
              <p>Name: <span id="personalName"></span></p>
              <p>Phone: <span id="personalPhone"></span></p>
              <p>DOB: <span id="personalDOB"></span></p>
            </div>
            <div class="row" onclick="toggleSection('storeDetailsSection')">
              <span>Store Details</span>
              <button class="edit-btn" onclick="showEditForm('storeDetailsForm')">Edit</button>
            </div>
            <div id="storeDetailsSection" class="details hidden">
              <p>Store Name: <span id="storeName"></span></p>
              <p>Store Address: <span id="storeAddress"></span></p>
            </div>
            <div class="row" onclick="toggleSection('bankDetailsSection')">
              <span>Bank Details</span>
              <button class="edit-btn" onclick="showEditForm('bankDetailsForm')">Edit</button>
            </div>
            <div id="bankDetailsSection" class="details hidden">
              <p>Bank Name: <span id="bankName"></span></p>
              <p>Bank Number: <span id="bankNumber"></span></p>
              <p>IFSC Code: <span id="ifscCode"></span></p>
            </div>
            <div class="row">
              <span>Product List</span>
              <button class="edit-btn" onclick="showPage('productListForm')">Edit</button>
            </div>
          </div>
        </section>

        <!-- Personal Details Page -->
        <section id="personalDetailsPage" class="page hidden">
          <div class="card">
            <h3>Personal Details</h3>
            <div class="details">
              <p>Name: <span id="personalName"></span></p>
              <p>Phone: <span id="personalPhone"></span></p>
              <p>DOB: <span id="personalDOB"></span></p>
            </div>
            <button class="edit-btn" onclick="showEditForm('personalDetailsForm')">Edit</button>
          </div>
        </section>

        <!-- Store Details Page -->
        <section id="storeDetailsPage" class="page hidden">
          <div class="card">
            <h3>Store Details</h3>
            <div class="details">
              <p>Store Name: <span id="storeName"></span></p>
              <p>Store Address: <span id="storeAddress"></span></p>
            </div>
            <button class="edit-btn" onclick="showEditForm('storeDetailsForm')">Edit</button>
          </div>
        </section>

        <!-- Bank Details Page -->
        <section id="bankDetailsPage" class="page hidden">
          <div class="card">
            <h3>Bank Details</h3>
            <div class="details">
              <p>Bank Name: <span id="bankName"></span></p>
              <p>Bank Number: <span id="bankNumber"></span></p>
              <p>IFSC Code: <span id="ifscCode"></span></p>
            </div>
            <button class="edit-btn" onclick="showEditForm('bankDetailsForm')">Edit</button>
          </div>
        </section>

        <!-- History Page -->
        <section id="historyPage" class="page hidden">
          <div class="tab-container">
            <div class="tab active" onclick="switchTab('transactions')">
              Transactions
            </div>
            <div class="tab" onclick="switchTab('settlement')">Settlement</div>
          </div>

          <div id="transactionsTab" class="tab-content active">
            <div class="settlement-info">
              Next Payment settlement to be credit by 11 PM, Tomorrow
            </div>
            <div class="payment-list">
              <div class="payment-item">
                <span>Last payment (1/2/2024)</span>
                <span>₹9000</span>
              </div>
              <div class="payment-item">
                <span>Dec 20/12/2024</span>
                <span>₹9000</span>
              </div>
              <div class="payment-item">
                <span>Dec 19/12/2024</span>
                <span>₹1000</span>
              </div>
              <div class="payment-item">
                <span>Dec 18/12/2024</span>
                <span>₹1000</span>
              </div>
            </div>
          </div>
          <div id="settlementTab" class="tab-content">
            <div class="card">
              <h3>Today Payment</h3>
              <div class="total-amount">₹9100</div>
              <p class="payment-count">5 Transactions</p>
              <p class="settlement-info">
                Settlement to be credited 11 AM Tomorrow
              </p>
              <div id="settlementPayments" class="payment-list"></div>
            </div>
          </div>
        </section>

        <!-- Help Page -->
        <section id="helpPage" class="page hidden">
          <div class="card">
            <h3>Help & Support</h3>
            <div class="qa-section">
              <div class="qa-item">
                <h4 onclick="toggleAnswer(this)">Q1: What is ...?</h4>
                <p class="answer">A1: Answer ...</p>
              </div>
              <div class="qa-item">
                <h4 onclick="toggleAnswer(this)">Q2: What is ...?</h4>
                <p class="answer">A2: Answer ...</p>
              </div>
              <div class="qa-item">
                <h4 onclick="toggleAnswer(this)">Q3: What is ...?</h4>
                <p class="answer">A3: Answer ...</p>
              </div>
              <div class="qa-item">
                <h4 onclick="toggleAnswer(this)">Q4: What is ...?</h4>
                <p class="answer">A4: Answer ...</p>
              </div>
              <div class="qa-item">
                <h4 onclick="toggleAnswer(this)">Q5: What is ...?</h4>
                <p class="answer">A5: Answer ...</p>
              </div>
            </div>
            <button type="button" class="download-btn" onclick="showPage('store')">Back</button>
          </div>
        </section>

        <!-- Product Listing Page -->
        <section id="productListingPage" class="page hidden">
          <div class="card">
            <h3>Product Listing</h3>
            <div id="productList" class="product-list"></div>
          </div>
        </section>

        <!-- Edit Forms -->
        <section id="personalDetailsForm" class="page hidden">
          <div class="card">
            <h3>Edit Personal Details</h3>
            <form>
              <label for="ownerName">Name:</label>
              <input type="text" id="ownerName" name="ownerName" required />
              <label for="dob">Date of Birth:</label>
              <input type="date" id="dob" name="dob" required />
              <label for="phoneNumber">Phone Number:</label>
              <input type="text" id="phoneNumber" name="phoneNumber" required />
              <label for="aadhar">Aadhar:</label>
              <input type="text" id="aadhar" name="aadhar" />
              <label for="pan">PAN:</label>
              <input type="text" id="pan" name="pan" />
              <div class="form-buttons">
                <button type="button" class="update-btn" onclick="updateDetails('personalDetailsForm')">Update</button>
                <button type="button" class="back-btn" onclick="showPage('account')">Cancel</button>
              </div>
            </form>
          </div>
        </section>

        <section id="storeDetailsForm" class="page hidden">
          <div class="card">
            <h3>Edit Store Details</h3>
            <form>
              <label for="storeName">Store Name:</label>
              <input type="text" id="storeName" name="storeName" required />
              <label for="address">Address:</label>
              <input type="text" id="address" name="address" required />
              <label for="numberOfProducts">Number of Products:</label>
              <input type="number" id="numberOfProducts" name="numberOfProducts" required />
              <label for="priceRange">Price Range:</label>
              <input type="text" id="priceRange" name="priceRange" required />
              <label for="storeAddress">Store Address:</label>
              <input type="text" id="storeAddress" name="storeAddress" required />
              <div class="form-buttons">
                <button type="button" class="update-btn" onclick="updateDetails('storeDetailsForm')">Update</button>
                <button type="button" class="back-btn" onclick="showPage('account')">Cancel</button>
              </div>
            </form>
          </div>
        </section>

        <section id="bankDetailsForm" class="page hidden">
          <div class="card">
            <h3>Edit Bank Details</h3>
            <form>
              <label for="bankName">Bank Name:</label>
              <input type="text" id="bankName" name="bankName" required />
              <label for="accountNumber">Account Number:</label>
              <input type="text" id="accountNumber" name="accountNumber" required />
              <label for="ifscCode">IFSC Code:</label>
              <input type="text" id="ifscCode" name="ifscCode" required />
              <div class="form-buttons">
                <button type="button" class="update-btn" onclick="updateDetails('bankDetailsForm')">Update</button>
                <button type="button" class="back-btn" onclick="showPage('account')">Cancel</button>
              </div>
            </form>
          </div>
        </section>

        <section id="productListForm" class="page hidden">
          <div class="card">
            <h3>Product List</h3>
            <div id="productList" class="product-list"></div>
          </div>
        </section>
      </main>

      <nav class="nav-bar">
        <a href="#" class="nav-item active" onclick="showPage('store')">Home</a>
        <a href="#" class="nav-item" onclick="showPage('qr')">QR</a>
        <a href="#" class="nav-item" onclick="showPage('account')">Account</a>
        <a href="#" class="nav-item" onclick="showPage('history')">History</a>
        <a href="#" class="nav-item" onclick="showPage('productListingPage')">Products</a>
      </nav>
    </div>
  <script src="./js/app.js"></script>
  </body>
</html>


css/app.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

body {
  background: #f5f5f5;
}

.app {
  max-width: 400px;
  margin: 0 auto;
  background: white;
  min-height: 100vh;
  position: relative;
}

.header {
  background: #4caf50;
  padding: 15px;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 100;
}

.help-btn {
  background: white;
  border: none;
  padding: 5px 15px;
  border-radius: 15px;
  color: #333;
  font-size: 14px;
  cursor: pointer;
  transition: background 0.3s, color 0.3s;
}

.help-btn:hover {
  background: #f0f0f0;
  color: #000;
}

.content {
  padding: 15px;
  padding-bottom: 70px;
  overflow-y: auto;
}

.card {
  background: white;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #eee;
}

.store-details .row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid #eee;
  cursor: pointer;
}

.store-details .row:last-child {
  border-bottom: none;
}

.details {
  padding: 10px 0;
}

.edit-btn {
  background: #4caf50;
  border: none;
  padding: 4px 12px;
  border-radius: 15px;
  font-size: 13px;
  color: white;
  cursor: pointer;
  transition: background 0.3s, color 0.3s;
}

.edit-btn:hover {
  background: #43a047;
}

.payment-list {
  list-style: none;
}

.payment-item {
  padding: 12px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: slideIn 0.3s ease-out;
}

.payment-item:last-child {
  border-bottom: none;
}

.nav-bar {
  position: fixed;
  bottom: 0;
  width: 100%;
  max-width: 400px;
  display: flex;
  background: white;
  border-top: 1px solid #eee;
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
}

.nav-item {
  flex: 1;
  padding: 12px 8px;
  text-align: center;
  color: #666;
  text-decoration: none;
  font-size: 14px;
  transition: color 0.3s;
}

.nav-item.active {
  color: #4caf50;
  font-weight: 500;
}

.nav-item:hover {
  color: #333;
}

.page {
  display: none;
}

.page.active {
  display: block;
  animation: fadeIn 0.3s ease-out;
}

.tab-container {
  display: flex;
  margin-bottom: 15px;
  background: #f5f5f5;
  border-radius: 8px;
  padding: 3px;
}

.tab {
  flex: 1;
  padding: 10px;
  text-align: center;
  background: transparent;
  cursor: pointer;
  border-radius: 6px;
  transition: all 0.3s;
  font-size: 14px;
}

.tab.active {
  background: #4caf50;
  color: white;
}

.tab:hover {
  background: #e0e0e0;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
  animation: fadeIn 0.3s ease-out;
}

.settlement-info {
  background: #e3f2fd;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 15px;
  color: #1565c0;
  font-size: 14px;
}

.qr-container {
  text-align: center;
}

.qr-code {
  width: 200px;
  height: 200px;
  margin: 20px auto;
  border: 1px solid #eee;
  padding: 10px;
  border-radius: 10px;
}

.download-btn {
  background: #4caf50;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 14px;
  cursor: pointer;
  transition: background 0.3s, transform 0.3s;
}

.download-btn:hover {
  background: #43a047;
  transform: scale(1.05);
}

.total-amount {
  font-size: 24px;
  font-weight: bold;
  margin: 10px 0;
  color: #333;
}

.payment-count {
  color: #666;
  font-size: 14px;
  margin-bottom: 15px;
}

.hidden {
  display: none;
}

.form-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 15px;
}

.update-btn, .back-btn {
  background: #4caf50;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 14px;
  cursor: pointer;
  transition: background 0.3s, transform 0.3s;
}

.update-btn:hover, .back-btn:hover {
  background: #43a047;
  transform: scale(1.05);
}

form {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

label {
  font-size: 14px;
  color: #333;
}

input, select {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 8px;
  font-size: 14px;
}

input:focus, select:focus {
  border-color: #4caf50;
  outline: none;
  box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
}

@keyframes slideIn {
  from {
    transform: translateX(-20px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.qa-section {
  margin-top: 20px;
}

.qa-item {
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  cursor: pointer;
}

.qa-item h4 {
  margin: 0;
}

.qa-item .answer {
  display: none;
  margin-top: 10px;
}

.product-list {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.product-card {
  background: white;
  border-radius: 10px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #eee;
  width: calc(50% - 15px);
  position: relative;
}

.product-image {
  width: 100%;
  height: auto;
  border-radius: 10px;
}

.product-info {
  margin-top: 10px;
}

.product-info h4 {
  margin: 0;
  font-size: 16px;
  color: #333;
}

.product-info p {
  margin: 5px 0;
  font-size: 14px;
  color: #666;
}

.edit-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #4caf50;
  color: white;
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  font-size: 12px;
  cursor: pointer;
  transition: background 0.3s, transform 0.3s;
}

.edit-btn:hover {
  background: #43a047;
  transform: scale(1.05);
}

js/app.js
const state = {
  currentPage: "store",
  currentTab: "transactions",
  storeDetails: {
    name: "Store Name",
    address: "",
    phone: "",
    bank: "",
  },
  personalDetails: {
    name: "",
    phone: "",
    dob: "",
  },
  bankDetails: {
    bankName: "",
    bankNumber: "",
    ifscCode: "",
  },
  payments: [
    {
      id: 1,
      name: "vikas",
      time: "7:20PM",
      amount: 1000,
      dishes: 5,
      date: "2024-01-02",
    },
    {
      id: 2,
      name: "vikas",
      time: "7:20PM",
      amount: 1000,
      dishes: 5,
      date: "2024-01-02",
    },
    {
      id: 3,
      name: "vikas",
      time: "7:20PM",
      amount: 1000,
      dishes: 5,
      date: "2024-01-02",
    },
    {
      id: 4,
      name: "vikas",
      time: "7:20PM",
      amount: 1000,
      dishes: 5,
      date: "2024-01-02",
    },
    {
      id: 5,
      name: "vikas",
      time: "7:20PM",
      amount: 1000,
      dishes: 5,
      date: "2024-01-02",
    },
  ],
  transactions: [
    { date: "2024-01-02", amount: 9000, type: "Last payment" },
    { date: "2024-12-20", amount: 9000, type: "Settlement" },
    { date: "2024-12-19", amount: 1000, type: "Payment" },
    { date: "2024-12-18", amount: 1000, type: "Payment" },
  ],
  products: [
    {
      "images": {
        "primary": "https://media.istockphoto.com/",
        "others": [
          "https://media.istockphoto.com/",
          "https://media.istockphoto.com/id"
        ]
      },
      "name": "SandWhich-1",
      "price": 1840,
      "ordersCount": 0,
      "productStatus": "active",
      "_id": "67758aefbc84f46bb57b36e1"
    },
    {
      "images": {
        "primary": "https://media.istockphoto.com/",
        "others": [
          "https://media.istockphoto.com/",
          "https://media.istockphoto.com/id"
        ]
      },
      "name": "sweet",
      "price": 1840,
      "ordersCount": 0,
      "productStatus": "active",
      "_id": "67758aefbc84f46bb57b36e2"
    },
    {
      "images": {
        "primary": "https://media.istockphoto.com/",
        "others": [
          "https://media.istockphoto.com/",
          "https://media.istockphoto.com/id"
        ]
      },
      "name": "water bottle",
      "price": 1840,
      "ordersCount": 0,
      "productStatus": "active",
      "_id": "67758aefbc84f46bb57b36e3"
    },
    {
      "images": {
        "primary": "https://media.istockphoto.com/",
        "others": [
          "https://media.istockphoto.com/",
          "https://media.istockphoto.com/id"
        ]
      },
      "name": "fry",
      "price": 1840,
      "ordersCount": 0,
      "productStatus": "active",
      "_id": "67758aefbc84f46bb57b36e4"
    },
    {
      "images": {
        "primary": "https://media.istockphoto.com/",
        "others": [
          "https://media.istockphoto.com/",
          "https://media.istockphoto.com/id"
        ]
      },
      "name": "fry-6",
      "price": 1840,
      "ordersCount": 0,
      "productStatus": "active",
      "_id": "67758aefbc84f46bb57b36e5"
    }
  ],
};

function showPage(page) {
  state.currentPage = page;
  document
    .querySelectorAll(".page")
    .forEach((p) => p.classList.remove("active"));
  document
    .querySelectorAll(".nav-item")
    .forEach((item) => item.classList.remove("active"));

  const pages = {
    store: {
      id: "storePage",
      title: "Store Details",
      render: renderTodayPayments,
    },
    qr: {
      id: "qrPage",
      title: "Store QR",
      render: renderQRCode,
    },
    account: { id: "accountPage", title: "Account Details" },
    history: {
      id: "historyPage",
      title: "Payment History",
      render: renderHistoryPage,
    },
    help: { id: "helpPage", title: "Help & Support" },
    productListingPage: {
      id: "productListingPage",
      title: "Product Listing",
      render: renderProductList,
    },
    personalDetails: {
      id: "personalDetailsPage",
      title: "Personal Details",
      render: renderPersonalDetails,
    },
    storeDetails: {
      id: "storeDetailsPage",
      title: "Store Details",
      render: renderStoreDetails,
    },
    bankDetails: {
      id: "bankDetailsPage",
      title: "Bank Details",
      render: renderBankDetails,
    },
  };

  const pageConfig = pages[page];
  if (pageConfig) {
    document.getElementById(pageConfig.id).classList.add("active");
    document
      .querySelector(`.nav-item[onclick="showPage('${page}')"]`)
      .classList.add("active");
    document.getElementById("pageTitle").textContent = pageConfig.title;
    if (pageConfig.render) pageConfig.render();
  }
  if (page === 'productListForm') {
    renderProductList();
  } else if (page === 'account') {
    renderPersonalDetails();
    renderStoreDetails();
    renderBankDetails();
  }
}

function switchTab(tab) {
  state.currentTab = tab;
  document
    .querySelectorAll(".tab")
    .forEach((t) => t.classList.remove("active"));
  document
    .querySelectorAll(".tab-content")
    .forEach((c) => c.classList.remove("active"));

  const tabElements = {
    transactions: { tab: ".tab:first-child", content: "transactionsTab" },
    settlement: { tab: ".tab:last-child", content: "settlementTab" },
  };

  const config = tabElements[tab];
  if (config) {
    document.querySelector(config.tab).classList.add("active");
    document.getElementById(config.content).classList.add("active");
  }
}

function renderTodayPayments() {
  const container = document.getElementById("todayPayments");
  const totalAmount = state.payments.reduce(
    (sum, p) => sum + p.amount,
    0
  );

  container.innerHTML = state.payments
    .map(
      (payment) => `
          <div class="payment-item">
              <span>${payment.name} ${payment.time} - ${payment.dishes} dish</span>
              <span>₹${payment.amount}</span>
          </div>
      `
    )
    .join("");
}

function renderHistoryPage() {
  renderTransactions();
  renderSettlementPayments();
}

function renderTransactions() {
  const container = document.querySelector(
    "#transactionsTab .payment-list"
  );
  container.innerHTML = state.transactions
    .map(
      (transaction) => `
          <div class="payment-item">
              <span>${transaction.type} (${transaction.date})</span>
              <span>₹${transaction.amount}</span>
          </div>
      `
    )
    .join("");
}

function renderSettlementPayments() {
  const container = document.getElementById("settlementPayments");
  const todayTotal = state.payments.reduce((sum, p) => sum + p.amount, 0);

  container.innerHTML = state.payments
    .map(
      (payment) => `
          <div class="payment-item">
              <span>${payment.name} ${payment.time}</span>
              <span>₹${payment.amount}</span>
          </div>
      `
    )
    .join("");
}

function fetchProductList() {
  const ownerId = localStorage.getItem('ownerId');
  const storeId = localStorage.getItem('storeId');
  fetch(`http://localhost:3000/api/owners/${ownerId}/stores/${storeId}/products`)
    .then((response) => response.json())
    .then((data) => {
      state.products = data;
      renderProductList();
    })
    .catch((error) => {
      console.error('Error fetching product list:', error);
      alert('Failed to fetch product list.');
    });
}

function renderProductList() {
  const container = document.getElementById('productList');
  container.innerHTML = state.products
    .map(
      (product) => `
        <div class="product-card">
          <img src="${product.images.primary}" alt="${product.name}" class="product-image">
          <div class="product-info">
            <h4>${product.name}</h4>
            <p>Price: ₹${product.price}</p>
            <p>Status: ${product.productStatus}</p>
            <button class="edit-btn" onclick="editProduct('${product._id}')">Edit</button>
          </div>
        </div>
      `
    )
    .join('');
}

function renderQRCode() {
  const qrLink = localStorage.getItem('QrLink');
  if (qrLink) {
    const qrCodeImage = document.getElementById('qrCodeImage');
    qrCodeImage.src = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrLink)}&size=200x200`;
  } else {
    alert('QR Code link not found in local storage.');
  }
}

function reloadQRCode() {
  renderQRCode();
}

function editProduct(productId) {
  const product = state.products.find((p) => p._id === productId);
  if (product) {
    document.getElementById('productName').value = product.name;
    document.getElementById('price').value = product.price;
    document.getElementById('primaryImage').value = product.images.primary;
    document.getElementById('otherImages').value = product.images.others.join(', ');
    document.getElementById('productStatus').value = product.productStatus;
    showPage('editProductForm');
  }
}

function updateProductDetails() {
  const productId = state.products.find((p) => p.name === document.getElementById('productName').value)._id;
  const updatedProduct = {
    name: document.getElementById('productName').value,
    price: document.getElementById('price').value,
    images: {
      primary: document.getElementById('primaryImage').value,
      others: document.getElementById('otherImages').value.split(',').map((url) => url.trim()),
    },
    productStatus: document.getElementById('productStatus').value,
  };

  // Update the product in the state
  state.products = state.products.map((product) =>
    product._id === productId ? { ...product, ...updatedProduct } : product
  );

  // Fire the API to update the product details
  const ownerId = localStorage.getItem('ownerId');
  const storeId = localStorage.getItem('storeId');
  fetch(`http://localhost:3000/api/owners/${ownerId}/stores/${storeId}/products/${productId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedProduct),
  })
    .then((response) => response.json())
    .then((data) => {
      alert('Product updated successfully!');
      showPage('productListForm');
    })
    .catch((error) => {
      console.error('Error updating product:', error);
      alert('Failed to update product.');
    });
}

function downloadQR() {
  const qrLink = localStorage.getItem('QrLink');
  if (qrLink) {
    const link = document.createElement('a');
    link.href = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrLink)}&size=200x200`;
    link.download = 'qr_code.png';
    link.click();
  } else {
    alert('QR Code link not found in local storage.');
  }
}

function showEditForm(formId) {
  document.querySelectorAll(".page").forEach((p) => p.classList.remove("active"));
  document.getElementById(formId).classList.add("active");

  if (formId === 'personalDetailsForm') {
    document.getElementById('ownerName').value = state.personalDetails.name;
    document.getElementById('phoneNumber').value = state.personalDetails.phone;
    document.getElementById('dob').value = state.personalDetails.dob;
  } else if (formId === 'bankDetailsForm') {
    document.getElementById('bankName').value = state.bankDetails.bankName;
    document.getElementById('accountNumber').value = state.bankDetails.bankNumber;
    document.getElementById('ifscCode').value = state.bankDetails.ifscCode;
  } else if (formId === 'storeDetailsForm') {
    document.getElementById('storeName').value = state.storeDetails.name;
    document.getElementById('storeAddress').value = state.storeDetails.address;
  }
}

function updateDetails(formId) {
  const ownerId = localStorage.getItem('ownerId');
  const storeId = localStorage.getItem('storeId');
  let updateData = {};

  if (formId === 'personalDetailsForm') {
    updateData = {
      name: document.getElementById('ownerName').value,
      phoneNumber: document.getElementById('phoneNumber').value,
      DOB: document.getElementById('dob').value,
    };
    fetch(`http://localhost:3000/api/owners/${ownerId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData),
    })
      .then(response => response.json())
      .then(data => {
        localStorage.setItem('ownerData', JSON.stringify(data));
        state.personalDetails.name = data.name;
        state.personalDetails.phone = data.phoneNumber;
        state.personalDetails.dob = data.DOB;
        alert('Personal details updated successfully!');
        showPage('account');
        renderPersonalDetails();
      })
      .catch(error => {
        console.error('Error updating personal details:', error);
        alert('Failed to update personal details.');
      });
  } else if (formId === 'bankDetailsForm') {
    updateData = {
      bankName: document.getElementById('bankName').value,
      accountNumber: document.getElementById('accountNumber').value,
      ifscCode: document.getElementById('ifscCode').value,
    };
    fetch(`http://localhost:3000/api/owners/${ownerId}/bank`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData),
    })
      .then(response => response.json())
      .then(data => {
        localStorage.setItem('ownerData', JSON.stringify(data));
        state.bankDetails.bankName = data.bankName;
        state.bankDetails.bankNumber = data.accountNumber;
        state.bankDetails.ifscCode = data.ifscCode;
        alert('Bank details updated successfully!');
        showPage('account');
        renderBankDetails();
      })
      .catch(error => {
        console.error('Error updating bank details:', error);
        alert('Failed to update bank details.');
      });
  } else if (formId === 'storeDetailsForm') {
    updateData = {
      name: document.getElementById('storeName').value,
      address: document.getElementById('storeAddress').value,
    };
    fetch(`http://localhost:3000/api/owners/${ownerId}/stores/${storeId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData),
    })
      .then(response => response.json())
      .then(data => {
        localStorage.setItem('storeData', JSON.stringify(data));
        state.storeDetails.name = data.name;
        state.storeDetails.address = data.address;
        alert('Store details updated successfully!');
        showPage('account');
        renderStoreDetails();
      })
      .catch(error => {
        console.error('Error updating store details:', error);
        alert('Failed to update store details.');
      });
  }
}

function renderPersonalDetails() {
  const ownerData = JSON.parse(localStorage.getItem('ownerData'));
  if (ownerData) {
    state.personalDetails.name = ownerData.name;
    state.personalDetails.phone = ownerData.phoneNumber;
    state.personalDetails.dob = ownerData.DOB;
    state.bankDetails.bankName = ownerData.bankName;
    state.bankDetails.bankNumber = ownerData.accountNumber;
    state.bankDetails.ifscCode = ownerData.ifscCode;
    document.getElementById('personalName').textContent = state.personalDetails.name;
    document.getElementById('personalPhone').textContent = state.personalDetails.phone;
    document.getElementById('personalDOB').textContent = state.personalDetails.dob;
    document.getElementById('bankName').textContent = state.bankDetails.bankName;
    document.getElementById('bankNumber').textContent = state.bankDetails.bankNumber;
    document.getElementById('ifscCode').textContent = state.bankDetails.ifscCode;
  } else {
    const ownerId = localStorage.getItem('ownerId');
    if (ownerId) {
      fetch(`http://localhost:3000/api/owners/${ownerId}`)
        .then(response => response.json())
        .then(ownerData => {
          localStorage.setItem('ownerData', JSON.stringify(ownerData));
          state.personalDetails.name = ownerData.name;
          state.personalDetails.phone = ownerData.phoneNumber;
          state.personalDetails.dob = ownerData.DOB;
          state.bankDetails.bankName = ownerData.bankName;
          state.bankDetails.bankNumber = ownerData.accountNumber;
          state.bankDetails.ifscCode = ownerData.ifscCode;
          document.getElementById('personalName').textContent = state.personalDetails.name;
          document.getElementById('personalPhone').textContent = state.personalDetails.phone;
          document.getElementById('personalDOB').textContent = state.personalDetails.dob;
          document.getElementById('bankName').textContent = state.bankDetails.bankName;
          document.getElementById('bankNumber').textContent = state.bankDetails.bankNumber;
          document.getElementById('ifscCode').textContent = state.bankDetails.ifscCode;
        })
        .catch(error => {
          console.error('Error fetching personal details:', error);
          alert('Failed to fetch personal details.');
        });
    }
  }
}

function renderStoreDetails() {
  const storeData = JSON.parse(localStorage.getItem('storeData'));
  if (storeData) {
    state.storeDetails.name = storeData.name;
    state.storeDetails.address = storeData.address;
    document.getElementById('storeName').textContent = state.storeDetails.name;
    document.getElementById('storeAddress').textContent = state.storeDetails.address;
  } else {
    const storeId = localStorage.getItem('storeId');
    if (storeId) {
      fetch(`http://localhost:3000/api/stores/${storeId}`)
        .then(response => response.json())
        .then(storeData => {
          localStorage.setItem('storeData', JSON.stringify(storeData));
          state.storeDetails.name = storeData.name;
          state.storeDetails.address = storeData.address;
          document.getElementById('storeName').textContent = state.storeDetails.name;
          document.getElementById('storeAddress').textContent = state.storeDetails.address;
        })
        .catch(error => {
          console.error('Error fetching store details:', error);
          alert('Failed to fetch store details.');
        });
    }
  }
}

function renderBankDetails() {
  const ownerData = JSON.parse(localStorage.getItem('ownerData'));
  if (ownerData) {
    state.bankDetails.bankName = ownerData.bankName;
    state.bankDetails.bankNumber = ownerData.accountNumber;
    state.bankDetails.ifscCode = ownerData.ifscCode;
    document.getElementById('bankName').textContent = state.bankDetails.bankName;
    document.getElementById('bankNumber').textContent = state.bankDetails.bankNumber;
    document.getElementById('ifscCode').textContent = state.bankDetails.ifscCode;
  } else {
    const ownerId = localStorage.getItem('ownerId');
    if (ownerId) {
      fetch(`http://localhost:3000/api/owners/${ownerId}/bank`)
        .then(response => response.json())
        .then(ownerData => {
          localStorage.setItem('ownerData', JSON.stringify(ownerData));
          state.bankDetails.bankName = ownerData.bankName;
          state.bankDetails.bankNumber = ownerData.accountNumber;
          state.bankDetails.ifscCode = ownerData.ifscCode;
          document.getElementById('bankName').textContent = state.bankDetails.bankName;
          document.getElementById('bankNumber').textContent = state.bankDetails.bankNumber;
          document.getElementById('ifscCode').textContent = state.bankDetails.ifscCode;
        })
        .catch(error => {
          console.error('Error fetching bank details:', error);
          alert('Failed to fetch bank details.');
        });
    }
  }
}

function toggleAnswer(element) {
  const answer = element.nextElementSibling;
  answer.style.display = answer.style.display === 'block' ? 'none' : 'block';
}

// Initialize app
showPage("store");
renderTodayPayments();

function toggleSection(sectionId) {
  const section = document.getElementById(sectionId);
  section.classList.toggle('hidden');
}